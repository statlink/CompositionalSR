me.asar <- function(be, mu, x, rho, coords, k = 10) {
  # Args:
  #   mu: n x D matrix of fitted compositions
  #   beta: d x p matrix of coefficients (d = D-1)
  #   x: n x p matrix of covariates (including intercept if used)
  #   rho: spatial autoregressive parameter
  #   W: n x n spatial weight matrix (should be row-normalized)
  #   return_individual: if TRUE, returns individual observation effects
  n <- dim(mu)[1]  ;   D <- dim(mu)[2]
  d <- D - 1
  x <- as.matrix(x)
  p <- dim(x)[2]
  W <- CompositionalSR::contiguity(coords, k)
  be <- t(be)[, -1, drop = FALSE]

  # Set up dimension names
  comp_names <- paste0("Y", 1:D)
  cov_names <- colnames(x)
  if ( is.null(cov_names) ) cov_names <- paste0("X", 1:p)
  obs_names <- paste0("Obs_", 1:n)

  # Step 1: Compute spatial multiplier matrix S(rho) = (I - rho*W)^(-1)
  I_n <- diag(n)
  S <- solve(I_n - rho * W)
  # Step 2: Compute non-spatial marginal effects (Equation 8 from paper)
  ME <- array(0, dim = c(n, D, p))

  for (i in 1:n) {
    for (k in 1:p) {
      # Compute sum term: sum_j beta_jk * mu_{j+1}
      sum_term <- sum(be[, k] * mu[i, 2:D])
      # Component 1 (reference)
      ME[i, 1, k] <-  -mu[i, 1] * sum_term
      # Components 2 to D
      for (ell in 2:D) {
        ME[i, ell, k] <- mu[i, ell] * (be[ell - 1, k] - sum_term)
      }
    }
  }

  # Step 3: Compute spatial marginal effects
  S_diag <- diag(S)        # Diagonal elements of S
  S_colsum <- Rfast::colsums(S)   # Column sums of S
  # Initialize arrays
  DE <- array(0, dim = c(n, D, p))
  dimnames(DE) <- list( observation = obs_names, component = comp_names, covariate = cov_names )
  IE <- TE <- DE

  for (ell in 1:D) {
    for (k in 1:p) {
      DE[, ell, k] <- (1 - rho) * S_diag * ME[, ell, k]      # Direct effects
      TE[, ell, k] <- (1 - rho) * S_colsum * ME[, ell, k]    # Total effects
      IE[, ell, k] <- (1 - rho) * TE[, ell, k] - DE[, ell, k] # Indirect effects
    }
  }

  # Step 4: Compute average marginal effects
  avg_DE <- t( apply(DE, c(2, 3), mean) )
  avg_IE <- t( apply(IE, c(2, 3), mean) )
  avg_TE <- t( apply(TE, c(2, 3), mean) )

  list( me.dir = DE, me.indir = IE, me.total = TE,
        ame.dir = avg_DE, ame.indir = avg_IE, ame.total = avg_TE )

}
